{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,C,C,E,I,E,E,kDCAe,SAAS,EAAmB,EAAS,CAAC,CAAC,EAClD,GAAM,CAAE,SAAA,EAAW,GAAI,CAAE,WAAA,EAAa,IAAK,CAAE,SAAA,EAAW,IAAM,IAAI,CAAE,CAAG,EAEvE,OAAO,AAAC,IACJ,IAAI,EAAU,CAAA,EACV,EAAW,KACX,EAAa,KACb,EAAe,KACf,EAAe,EAAE,CACjB,EAAQ,KAEN,EAAwB;A;A;A;A;A;A;A;A;A;A;AAW9B,QAAA,CAAC,CAEK,EAAuB,KACzB,IAAM,EAAO,IAAI,KAAK,CAAC,EAAsB,CAAE,CAAE,KAAM,wBAAyB,GAChF,OAAO,IAAI,eAAe,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","sources":["<anon>","packages/artplayer-plugin-asr/src/index.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (\n  modules,\n  entry,\n  mainEntry,\n  parcelRequireName,\n  externals,\n  distDir,\n  publicUrl,\n  devServer\n) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var importMap = previousRequire.i || {};\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        if (externals[name]) {\n          return externals[name];\n        }\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.require = nodeRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.distDir = distDir;\n  newRequire.publicUrl = publicUrl;\n  newRequire.devServer = devServer;\n  newRequire.i = importMap;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  // Only insert newRequire.load when it is actually used.\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\n  // INSERT_LOAD_HERE\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n    }\n  }\n})({\"40eeC\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"default\", ()=>artplayerPluginAsr);\nfunction artplayerPluginAsr(option = {}) {\n    const { interval = 5000, sampleRate = 16000, callback = ()=>null } = option;\n    return (art)=>{\n        let started = false;\n        let audioCtx = null;\n        let sourceNode = null;\n        let recorderNode = null;\n        let bufferChunks = [];\n        let timer = null;\n        const recorderProcessorCode = `\n            class RecorderProcessor extends AudioWorkletProcessor {\n                process(inputs) {\n                    const input = inputs[0];\n                    if (input && input[0]) {\n                        this.port.postMessage(input[0]);\n                    }\n                    return true;\n                }\n            }\n            registerProcessor('recorder-processor', RecorderProcessor);\n        `;\n        const createWorkletBlobUrl = ()=>{\n            const blob = new Blob([\n                recorderProcessorCode\n            ], {\n                type: 'application/javascript'\n            });\n            return URL.createObjectURL(blob);\n        };\n        function floatTo16BitPCM(float32Array) {\n            const len = float32Array.length;\n            const buffer = new ArrayBuffer(len * 2);\n            const view = new DataView(buffer);\n            for(let i = 0; i < len; i++){\n                let s = Math.max(-1, Math.min(1, float32Array[i]));\n                view.setInt16(i * 2, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n            }\n            return buffer;\n        }\n        function mergeFloat32Array(chunks) {\n            const length = chunks.reduce((acc, cur)=>acc + cur.length, 0);\n            const result = new Float32Array(length);\n            let offset = 0;\n            chunks.forEach((chunk)=>{\n                result.set(chunk, offset);\n                offset += chunk.length;\n            });\n            return result;\n        }\n        function encodeWavPCM(buffers, sampleRate) {\n            const samples = mergeFloat32Array(buffers);\n            const dataLength = samples.length * 2;\n            const buffer = new ArrayBuffer(44 + dataLength);\n            const view = new DataView(buffer);\n            function writeStr(offset, str) {\n                for(let i = 0; i < str.length; i++)view.setUint8(offset + i, str.charCodeAt(i));\n            }\n            writeStr(0, 'RIFF');\n            view.setUint32(4, 36 + dataLength, true);\n            writeStr(8, 'WAVE');\n            writeStr(12, 'fmt ');\n            view.setUint32(16, 16, true); // fmt chunk size\n            view.setUint16(20, 1, true); // audio format = PCM\n            view.setUint16(22, 1, true); // mono\n            view.setUint32(24, sampleRate, true);\n            view.setUint32(28, sampleRate * 2, true); // byte rate\n            view.setUint16(32, 2, true); // block align\n            view.setUint16(34, 16, true); // bits per sample\n            writeStr(36, 'data');\n            view.setUint32(40, dataLength, true);\n            const pcm = floatTo16BitPCM(samples);\n            new Uint8Array(buffer).set(new Uint8Array(pcm), 44);\n            return new Blob([\n                view\n            ], {\n                type: 'audio/wav'\n            });\n        }\n        async function startCapture() {\n            if (started) return;\n            started = true;\n            audioCtx = new (window.AudioContext || window.webkitAudioContext)({\n                sampleRate\n            });\n            if (audioCtx.state === 'suspended') await audioCtx.resume();\n            if (!sourceNode) {\n                sourceNode = audioCtx.createMediaElementSource(art.video);\n                sourceNode.connect(audioCtx.destination);\n            }\n            const blobUrl = createWorkletBlobUrl();\n            await audioCtx.audioWorklet.addModule(blobUrl);\n            URL.revokeObjectURL(blobUrl);\n            recorderNode = new AudioWorkletNode(audioCtx, 'recorder-processor');\n            recorderNode.port.onmessage = (event)=>{\n                bufferChunks.push(new Float32Array(event.data));\n            };\n            sourceNode.connect(recorderNode).connect(audioCtx.destination);\n            timer = setInterval(async ()=>{\n                if (bufferChunks.length === 0) return;\n                const wav = encodeWavPCM(bufferChunks, audioCtx.sampleRate);\n                const buffer = await wav.arrayBuffer();\n                await callback(buffer);\n                bufferChunks = [];\n            }, interval);\n        }\n        function stopCapture() {\n            if (!started) return;\n            started = false;\n            if (timer) clearInterval(timer);\n            if (recorderNode) recorderNode.disconnect();\n            recorderNode = null;\n            bufferChunks = [];\n        }\n        art.on('play', startCapture);\n        art.on('pause', stopCapture);\n        art.on('destroy', stopCapture);\n        return {\n            name: 'artplayerPluginAsr',\n            destroy: stopCapture\n        };\n    };\n}\nif (typeof window !== 'undefined') window['artplayerPluginAsr'] = artplayerPluginAsr;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"5lQoW\"}],\"5lQoW\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"40eeC\"], \"40eeC\", \"parcelRequire4dc0\", {})\nlet {default: _default, } = parcelRequire4dc0(\"40eeC\");\nexport {_default as default, };\n\n//# sourceMappingURL=index.js.map\n","export default function artplayerPluginAsr(option = {}) {\n    const { interval = 5000, sampleRate = 16000, callback = () => null } = option;\n\n    return (art) => {\n        let started = false;\n        let audioCtx = null;\n        let sourceNode = null;\n        let recorderNode = null;\n        let bufferChunks = [];\n        let timer = null;\n\n        const recorderProcessorCode = `\n            class RecorderProcessor extends AudioWorkletProcessor {\n                process(inputs) {\n                    const input = inputs[0];\n                    if (input && input[0]) {\n                        this.port.postMessage(input[0]);\n                    }\n                    return true;\n                }\n            }\n            registerProcessor('recorder-processor', RecorderProcessor);\n        `;\n\n        const createWorkletBlobUrl = () => {\n            const blob = new Blob([recorderProcessorCode], { type: 'application/javascript' });\n            return URL.createObjectURL(blob);\n        };\n\n        function floatTo16BitPCM(float32Array) {\n            const len = float32Array.length;\n            const buffer = new ArrayBuffer(len * 2);\n            const view = new DataView(buffer);\n            for (let i = 0; i < len; i++) {\n                let s = Math.max(-1, Math.min(1, float32Array[i]));\n                view.setInt16(i * 2, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n            }\n            return buffer;\n        }\n\n        function mergeFloat32Array(chunks) {\n            const length = chunks.reduce((acc, cur) => acc + cur.length, 0);\n            const result = new Float32Array(length);\n            let offset = 0;\n            chunks.forEach((chunk) => {\n                result.set(chunk, offset);\n                offset += chunk.length;\n            });\n            return result;\n        }\n\n        function encodeWavPCM(buffers, sampleRate) {\n            const samples = mergeFloat32Array(buffers);\n            const dataLength = samples.length * 2;\n            const buffer = new ArrayBuffer(44 + dataLength);\n            const view = new DataView(buffer);\n\n            function writeStr(offset, str) {\n                for (let i = 0; i < str.length; i++) {\n                    view.setUint8(offset + i, str.charCodeAt(i));\n                }\n            }\n\n            writeStr(0, 'RIFF');\n            view.setUint32(4, 36 + dataLength, true);\n            writeStr(8, 'WAVE');\n            writeStr(12, 'fmt ');\n            view.setUint32(16, 16, true); // fmt chunk size\n            view.setUint16(20, 1, true); // audio format = PCM\n            view.setUint16(22, 1, true); // mono\n            view.setUint32(24, sampleRate, true);\n            view.setUint32(28, sampleRate * 2, true); // byte rate\n            view.setUint16(32, 2, true); // block align\n            view.setUint16(34, 16, true); // bits per sample\n            writeStr(36, 'data');\n            view.setUint32(40, dataLength, true);\n\n            const pcm = floatTo16BitPCM(samples);\n            new Uint8Array(buffer).set(new Uint8Array(pcm), 44);\n\n            return new Blob([view], { type: 'audio/wav' });\n        }\n\n        async function startCapture() {\n            if (started) return;\n            started = true;\n\n            audioCtx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate });\n\n            if (audioCtx.state === 'suspended') {\n                await audioCtx.resume();\n            }\n\n            if (!sourceNode) {\n                sourceNode = audioCtx.createMediaElementSource(art.video);\n                sourceNode.connect(audioCtx.destination);\n            }\n\n            const blobUrl = createWorkletBlobUrl();\n            await audioCtx.audioWorklet.addModule(blobUrl);\n            URL.revokeObjectURL(blobUrl);\n\n            recorderNode = new AudioWorkletNode(audioCtx, 'recorder-processor');\n            recorderNode.port.onmessage = (event) => {\n                bufferChunks.push(new Float32Array(event.data));\n            };\n\n            sourceNode.connect(recorderNode).connect(audioCtx.destination);\n\n            timer = setInterval(async () => {\n                if (bufferChunks.length === 0) return;\n                const wav = encodeWavPCM(bufferChunks, audioCtx.sampleRate);\n                const buffer = await wav.arrayBuffer();\n                await callback(buffer);\n                bufferChunks = [];\n            }, interval);\n        }\n\n        function stopCapture() {\n            if (!started) return;\n            started = false;\n            if (timer) clearInterval(timer);\n            if (recorderNode) recorderNode.disconnect();\n            recorderNode = null;\n            bufferChunks = [];\n        }\n\n        art.on('play', startCapture);\n        art.on('pause', stopCapture);\n        art.on('destroy', stopCapture);\n\n        return {\n            name: 'artplayerPluginAsr',\n            destroy: stopCapture,\n        };\n    };\n}\n\nif (typeof window !== 'undefined') {\n    window['artplayerPluginAsr'] = artplayerPluginAsr;\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","mainExports","define","amd","__globalThis","parcelHelpers","artplayerPluginAsr","option","interval","sampleRate","callback","art","started","audioCtx","sourceNode","recorderNode","bufferChunks","timer","recorderProcessorCode","createWorkletBlobUrl","blob","Blob","type","URL","createObjectURL","startCapture","AudioContext","webkitAudioContext","state","resume","createMediaElementSource","video","connect","destination","blobUrl","audioWorklet","addModule","revokeObjectURL","AudioWorkletNode","port","onmessage","event","push","Float32Array","data","setInterval","wav","encodeWavPCM","buffers","samples","mergeFloat32Array","chunks","result","reduce","acc","cur","offset","forEach","chunk","set","dataLength","buffer","ArrayBuffer","view","DataView","writeStr","str","setUint8","charCodeAt","setUint32","setUint16","pcm","floatTo16BitPCM","float32Array","len","s","Math","max","min","setInt16","Uint8Array","arrayBuffer","stopCapture","clearInterval","disconnect","on","destroy","defineInteropFlag","export","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","key","prototype","hasOwnProperty","enumerable","destName","_default","parcelRequire4dc0"],"version":3,"file":"index.js.map"}